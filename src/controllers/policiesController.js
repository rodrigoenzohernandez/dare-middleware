const get = require('../services/GET');
const errorMsg = require('../functions/returnErrorMessage');
const isInvalidLimit = require('../functions/isInvalidLimit');

const policiesController = {
  /**
 * Get the list of the client policies limited to 10 elements by default.
 * @param {object} req   Node autogenerated request object
 * @param {object} res   Node autogenerated response object
 * @returns {object}     Response
 *
 */
  async getPolicies(req, res) {
    const config = { headers: { Authorization: req.headers.authorization } };
    const data = await get(res, config, req.baseUrl);
    const { limit } = req.query;

    if (limit) {
      if (await isInvalidLimit(limit)) return errorMsg(res, 404, 'Invalid limit. It must be a number greater than 0');
      const limitedData = data.slice(0, limit);
      return res.send(limitedData);
    }
    return res.send(data);
  },

  /**
 * Get the details of a client policies
 * @param {object} req   Node autogenerated request object
 * @param {object} res   Node autogenerated response object
 * @returns {object}     Response
 *
 */

  async getPolicy(req, res) {
    const config = { headers: { Authorization: req.headers.authorization } };
    const data = await get(res, config, req.baseUrl);
    const { id } = req.params;
    const policyFiltered = data.find((policy) => policy.id === id);
    if (policyFiltered) return res.send(policyFiltered);
    return errorMsg(res, 404, `No policy was found with the id: ${id}`);
  },
};

module.exports = policiesController;
